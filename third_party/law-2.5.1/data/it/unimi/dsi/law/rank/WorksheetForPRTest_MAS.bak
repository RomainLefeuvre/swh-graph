<?xml version="1.0" encoding="UTF-8"?>
<Worksheet><Version major="6" minor="1"/><View-Properties><Zoom percentage="100"/></View-Properties><Styles><Layout alignment="left" bullet="none" name="Warning"/><Layout alignment="left" bullet="none" firstindent="0.0" leftmargin="0.0" linebreak="space" linespacing="0.0" name="Normal" rightmargin="0.0" spaceabove="0.0" spacebelow="0.0"/><Layout alignment="centred" bullet="none" linespacing="0.5" name="Maple Output"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="Maple Input" opaque="false" size="12"/><Font background="[0,0,0]" family="Monospaced" foreground="[0,0,255]" name="Warning" opaque="false" readonly="true" size="12"/><Font background="[0,0,0]" family="Times New Roman" foreground="[0,0,255]" name="2D Output" opaque="false" readonly="true" size="12"/></Styles><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">with(networks): with(ListTools): with(LinearAlgebra):</Text-field></Input><Output><Text-field layout="Warning" style="Warning">Warning, the assigned name Group now has a global binding</Text-field></Output><Output><Text-field layout="Warning" style="Warning">Warning, the names DotProduct and Transpose have been rebound</Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">Digits:=100;

# This function substitutes edges (networks package)
# to work around a bug. 
#
# edgez([x,y],G) returns the set of edges from x to y in G
#
edgez :=
	proc(x,G)
		if (x[1]&lt;&gt;x[2]) then
			edges(x,G);
		else
			edges({x[1],x[2]},G,'all');
		fi;
	end:

# This function substitutes outdegree (networks package)
# to work around a bug. 
#
# outdegree(x,G) returns the outdegree of G in x
#
outdegreez := (x,G)-&gt;outdegree(x,G)+nops(edgez([x,x],G)):

#
# A graph is specified as a list of pairs or triples of values: the first two values
# represent (the two endpoints of) an arc and the third, if present, represents its colour.
# This function returns the graph (as a network). 
# The second argument, n, is the number of nodes: it is present because we want to allow
# graphs with isolated nodes; if n is greater than the larger node number present in the
# edge list, it will be ignored.
#
buildGraph := 
	proc(E,nv)
		local G, fe, mn, n, i, j;
		new(G);
		fe:=sort(Flatten(E)); 
		if (nops(fe)&gt;0) then mn:=fe[nops(fe)];
		else mn:=-1; fi;
		n:=max(nv,mn);
		addvertex({seq(k,k=1..n)},G);
		for i from 1 to nops(E) do
			if (nops(E[i])&gt;2) then
				addedge([E[i][1],E[i][2]],weights=E[i][3],G);
			else
				addedge(E[i],G);
			end;
		end;
		G;
	end:
</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSdEaWdpdHNHNiIiJCsi</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">#
# Re-colours a given graph with its PageRank colouring. For nodes that do not have any outgoing
# link, the patching vector u is used: if i does not have any outgoing link, then for every
# j we will have an arc from i to j with color u[j] iff u[j]&gt;0.
#
pageRankColour :=
	proc(G,u)
		local s, i, j, k, e, w, n;
		n:=nops(vertices(G));
		for i from 1 to n do
			if (outdegreez(i,G)&gt;0) then
				w:=1/outdegreez(i,G);
				for j from 1 to n do
					e := edgez([i,j],G);
					for k from 1 to nops(e) do
						delete({e[k]},G);
						addedge([i,j],weights=w,G);
					end;
				end;
			else
				for j from 1 to n do
					if (u[j]&gt;0) then
						addedge([i,j],weights=u[j],G);
					end;
				end;
			end;
				
		end;
	end:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">#
# Given a graph, returns the corresponding matrix of weights: the entry (i,j) is the sum of weights of all
# arcs from i to j.
#
graphMatrix :=
	proc(G)
		local A, n, i, j, k, e, s;
		n:=nops(vertices(G));
		A:=Matrix(n,n);
		for i from 1 to n do
			for j from 1 to n do
				e := edgez([i,j],G);
				s := 0;
				for k from 1 to nops(e) do
					s := s + eweight(e[k],G);
				end;
				A[i,j]:=s;
			end;
		end;
		A;
	end:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">#
# Returns the identity matrix of size n.
#
idMatrix :=
	proc(n)
		Matrix(n,n,shape=identity);
	end:
# 
# Returns the vector of ones of size n.
#
oneVector :=
	proc(n)
		local f;
		f:=(i)-&gt;1;
		Vector(n,f);
	end:


#
# Returns the matrix A perturbed using the vector v. 
#
perturbed :=
	proc(A,v,alpha)
		local n;
		n := RowDimension(A);
		simplify(alpha*A+(1-alpha)*oneVector(n).Transpose(v));
	end:

# 
# Computes the stationary distrubution of the perturbed matrix associated to A, using the vector v.
#
stationary :=
	proc(A,v,alpha)
		local n;
		n:=RowDimension(A);
		simplify((1-alpha)*Transpose(v).(idMatrix(n)-alpha*A)^(-1));
	end:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">dir:="/home/vigna/law/java/data/it/unimi/dsi/law/rank/":
pref:="test50-.6-7-3-2-10-graph":
suffixes:=["1stHalf","2ndHalf","alternate","uniform"]:
read(cat(dir,pref,".mw")):
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">for k from 1 to nops(suffixes) do
	fn:=cat(dir,pref,"-preferenceVector-",suffixes[k]):
	read(cat(fn,".mw")):
	G:=buildGraph(eG,50): N:=nops(vertices(G)): pageRankColour(G,oneVector(N)/N): wpr:=stationary(graphMatrix(G),v,0.85):
	f:=fopen(cat(fn,"-w.out"),WRITE,TEXT):
	for i from 1 to 50 do fprintf(f,"%.30g\n",wpr[i]): end: fclose(f):
	G:=buildGraph(eG,50): N:=nops(vertices(G)): pageRankColour(G,v): spr:=stationary(graphMatrix(G),v,0.85):
	f:=fopen(cat(fn,"-s.out"),WRITE,TEXT):
	for i from 1 to 50 do fprintf(f,"%.30g\n",spr[i]): end: fclose(f):
end:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">dir:="/home/vigna/law/java/data/it/unimi/dsi/law/rank/":
pref:="test10-.7-2-2-2-5-graph":
suffixes:=["1stHalf","2ndHalf","alternate","uniform"]:
read(cat(dir,pref,".mw")):
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">for k from 1 to nops(suffixes) do
	G:=buildGraph(eG,10): N:=nops(vertices(G)): 
	fn:=cat(dir,pref,"-preferenceVector-",suffixes[k]):
	read(cat(fn,".mw")):
	pageRankColour(G,oneVector(N)/N): wpra:=stationary(graphMatrix(G),v,a):
	wpr:=eval(wpra,a=0.85):
	wprad:=[seq(diff(wpra[i],a),i=1..10)]:
	wprd:=eval(wprad,a=0.85):
	wpradd:=[seq(diff(wprad[i],a),i=1..10)]:
	wprdd:=eval(wpradd,a=0.85):
	f:=fopen(cat(fn,"-w.out"),WRITE,TEXT):
	for i from 1 to 10 do fprintf(f,"%.30g\n",wpr[i]): end: fclose(f):
	f:=fopen(cat(fn,"-wd1.out"),WRITE,TEXT):
	for i from 1 to 10 do fprintf(f,"%.30g\n",wprd[i]): end: fclose(f):
	f:=fopen(cat(fn,"-wd2.out"),WRITE,TEXT):
	for i from 1 to 10 do fprintf(f,"%.30g\n",wprdd[i]): end: fclose(f):

	pageRankColour(G,v): spra:=stationary(graphMatrix(G),v,a):
	print(v);
	print(graphMatrix(G));
	print(spra);
	spr:=eval(spra,a=0.85):
	sprad:=[seq(diff(spra[i],a),i=1..10)]:
	sprd:=eval(sprad,a=0.85):
	spradd:=[seq(diff(sprad[i],a),i=1..10)]:
	sprdd:=eval(spradd,a=0.85):
	f:=fopen(cat(fn,"-s.out"),WRITE,TEXT):
	for i from 1 to 10 do fprintf(f,"%.30g\n",spr[i]): end: fclose(f):
	f:=fopen(cat(fn,"-sd1.out"),WRITE,TEXT):
	for i from 1 to 10 do fprintf(f,"%.30g\n",sprd[i]): end: fclose(f):
	f:=fopen(cat(fn,"-sd2.out"),WRITE,TEXT):
	for i from 1 to 10 do fprintf(f,"%.30g\n",sprdd[i]): end: fclose(f):
end:</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpTyNRZSQtSSdNQVRSSVhHRiU2IzcsNyMkIicrKz8hIidGLEYsRixGLDcjJCIiIUYyRjBGMEYwRjAmSSdWZWN0b3JHNiRJKnByb3RlY3RlZEdGNkkoX3N5c2xpYkdGJTYjSSdjb2x1bW5HRiU=</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpY0tQUC1JJ01BVFJJWEdGJTYjNyw3LCMiIiIiIzVGLUYtRi1GLUYtRi1GLUYtRi03LCNGLiIiIyIiIUYzRjNGMUYzRjNGM0YzRjM3LEYxRjFGM0YzRjNGM0YzRjNGM0YzRiw3LEYxRjNGMUYzRjNGM0YzRjNGM0YzRixGLDcsRjNGM0YzRjNGM0YzRi5GM0YzRjNGLDcsRjNGM0YzRjNGM0YzRjFGMUYzRjNJJ01hdHJpeEc2JEkqcHJvdGVjdGVkR0Y6SShfc3lzbGliR0Yl</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpK1NlUS1JJ1ZFQ1RPUkdGJTYjNywsJComLCwqJEkiYUdGJSIiJSIiIiokRjAiIiQkRjEiIiEqJEYwIiIjJCIiKkY2RjAkISM5RjYkISM/RjZGMkYyLChGM0YyRjckRjhGNiQhI1NGNkYyISIiJCJfcSsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKytTISQrIiwkKiYsKkYzRjJGNyRGNEY2RjAkIiInRjZGPUYyRjJGP0ZDRkRGRywkKiYsKkYwJCEjS0Y2Ri9GMkYzRjIkIiNTRjZGMkYyRj9GQyQhX3ErKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrP0ZGRkcsJCooLCZGMEYyRjVGMkYyRjBGMkY/RkMkIV9xKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrK1NGRiwkKigsKkYzRjJGNyQiIihGNkYwJCIjOUY2JCIiKUY2RjJGMkYwRjJGP0ZDRlQsJCooLChGN0YyRlxvRjJGMEZLRjJGMEYyRj9GQ0ZURlZGViZJJ1ZlY3Rvckc2JEkqcHJvdGVjdGVkR0Zkb0koX3N5c2xpYkdGJTYjSSRyb3dHRiU=</Equation></Text-field></Output><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpKSl5cU8tSSdNQVRSSVhHRiU2IzcsNyMkIiIhRi5GLEYsRixGLDcjJCInKys/ISInRi9GL0YvRi8mSSdWZWN0b3JHNiRJKnByb3RlY3RlZEdGNkkoX3N5c2xpYkdGJTYjSSdjb2x1bW5HRiU=</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpWypwZyQtSSdNQVRSSVhHRiU2IzcsNywjIiIiIiM1Ri1GLUYtRi1GLUYtRi1GLUYtNywjRi4iIiMiIiFGM0YzRjFGM0YzRjNGM0YzNyxGMUYxRjNGM0YzRjNGM0YzRjNGM0YsNyxGMUYzRjFGM0YzRjNGM0YzRjNGM0YsRiw3LEYzRjNGM0YzRjNGM0YuRjNGM0YzRiw3LEYzRjNGM0YzRjNGM0YxRjFGM0YzSSdNYXRyaXhHNiRJKnByb3RlY3RlZEdGOkkoX3N5c2xpYkdGJQ==</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpTyh5eCQtSSdWRUNUT1JHRiU2IzcsLCQqKiwoJCIiJyIiISIiIkkiYUdGJSQiIiRGMSokRjMiIiNGMkYyRjNGMiwmRjNGMiRGMkYxRjJGMiwoKiRGM0Y1RjJGNiRGN0YxJCEjU0YxRjIhIiIkIV9xKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrK1MhJCsiLCQqKEYuRjJGM0YyRjpGP0ZARkMsJCoqRi5GMiwmRjNGMiQhIiNGMUYyRjJGM0YyRjpGPyQiX3ErKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrP0ZCRkMsJComLChGNkYyRjMkIiM5RjEkISM/RjFGMkYyRjpGPyQiX3ErKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrU0ZCLCQqJiwsKiRGMyIiJUYyRjskIiM8RjFGNiQiI0NGMUYzJCEjS0YxRj1GMkYyRjpGP0ZKLCQqJiwqRjtGMkYzJCIiKUYxRjYkIiM7RjFGPUYyRjJGOkY/RkpGTEZMJkknVmVjdG9yRzYkSSpwcm90ZWN0ZWRHRmRvSShfc3lzbGliR0YlNiNJJHJvd0dGJQ==</Equation></Text-field></Output><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpV3ReTi1JJ01BVFJJWEdGJTYjNyw3IyQiJysrPyEiJzcjJCIiIUYyRixGMEYsRjBGLEYwRixGMCZJJ1ZlY3Rvckc2JEkqcHJvdGVjdGVkR0Y2SShfc3lzbGliR0YlNiNJJ2NvbHVtbkdGJQ==</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpKUdAcyQtSSdNQVRSSVhHRiU2IzcsNywjIiIiIiM1Ri1GLUYtRi1GLUYtRi1GLUYtNywjRi4iIiMiIiFGM0YzRjFGM0YzRjNGM0YzNyxGMUYxRjNGM0YzRjNGM0YzRjNGM0YsNyxGMUYzRjFGM0YzRjNGM0YzRjNGM0YsRiw3LEYzRjNGM0YzRjNGM0YuRjNGM0YzRiw3LEYzRjNGM0YzRjNGM0YxRjFGM0YzSSdNYXRyaXhHNiRJKnByb3RlY3RlZEdGOkkoX3N5c2xpYkdGJQ==</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpR01iUC1JJ1ZFQ1RPUkdGJTYjNywsJComLCwqJEkiYUdGJSIiJSIiIiokRjAiIiQkIiImIiIhKiRGMCIiIyQiIidGN0YwJCEjN0Y3JCEjU0Y3RjJGMiwoRjNGMkY4JEY5RjdGPkYyISIiJCJfcSsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKys/ISQrIiwkKiosLEY4JCIiKUY3RjAkISM/RjckISNrRjdGMkYzRjVGL0YyRjJGMEYyRkBGQiwoRjhGMkYwRkEkRjFGN0YyRkIkIl9xKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrK1NGRSwkKigsLEYzRlBGOCQiIzdGN0YwRjxGPkYyRi9GMkYyRkBGQkZPRkIkIl9xKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKyEpRkUsJCooLCZGMEYyJCEiJ0Y3RjJGMkYwRjJGQEZCRlEsJCooLC5GM0Y6RjgkISM7RjdGMCQiIztGNyokRjBGNkYyRi8kRjRGNyQhIyEpRjdGMkYyRkBGQkZPRkJGUUZaLCQqJiwqRjNGQUY4JCIiKEY3RjAkISM5RjckIiM/RjdGMkYyRkBGQiQhX3ErKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrU0ZFLCQqKCwoRjhGMkY8RjJGMCQhIiVGN0YyRjBGMkZARkJGQywkKiYsLEY4RmJwRjAkISNHRjdGL0YyRjNGMiQiI1NGN0YyRjJGQEZCJCFfcSsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKys/RkVGWiZJJ1ZlY3Rvckc2JEkqcHJvdGVjdGVkR0ZgcUkoX3N5c2xpYkdGJTYjSSRyb3dHRiU=</Equation></Text-field></Output><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpY0cmeiQtSSdNQVRSSVhHRiU2IzcsNyMkIicrKzUhIidGLEYsRixGLEYsRixGLEYsRiwmSSdWZWN0b3JHNiRJKnByb3RlY3RlZEdGM0koX3N5c2xpYkdGJTYjSSdjb2x1bW5HRiU=</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpIz4jNE0tSSdNQVRSSVhHRiU2IzcsNywjIiIiIiM1Ri1GLUYtRi1GLUYtRi1GLUYtNywjRi4iIiMiIiFGM0YzRjFGM0YzRjNGM0YzNyxGMUYxRjNGM0YzRjNGM0YzRjNGM0YsNyxGMUYzRjFGM0YzRjNGM0YzRjNGM0YsRiw3LEYzRjNGM0YzRjNGM0YuRjNGM0YzRiw3LEYzRjNGM0YzRjNGM0YxRjFGM0YzSSdNYXRyaXhHNiRJKnByb3RlY3RlZEdGOkkoX3N5c2xpYkdGJQ==</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiMtSSdSVEFCTEVHNiI2JSIpbzpJTi1JJ1ZFQ1RPUkdGJTYjNywsJComLCZJImFHRiUiIiIkRjAiIiFGMEYwLCgqJEYvIiIkRjAqJEYvIiIjJEY3RjIkISNTRjJGMCEiIiQhIiVGMiwkKiRGM0Y7RjxGPiwkKiYsJkYvRjAkISIjRjJGMEYwRjNGO0Y4Rj5GQComLCpGNEYwRjZGMEYvRjxGPEYwRjBGM0Y7KiYsJkY2RjBGPEYwRjBGM0Y7RkBGQCZJJ1ZlY3Rvckc2JEkqcHJvdGVjdGVkR0ZMSShfc3lzbGliR0YlNiNJJHJvd0dGJQ==</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Text-field/><Text-field/><Text-field/><Text-field/></Worksheet>